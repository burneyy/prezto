#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# ==========================
# Customize to your needs...
# ==========================
#  Enable fzf if available
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Enable iTerm2 shell integration if available
[ -f ~/.iterm2_shell_integration.zsh ] && source ~/.iterm2_shell_integration.zsh

# Custom TMUX commands
# ====================
#Update display in case we lost the connection through X11
tmux_update_display()
{
    export DISPLAY="`tmux show-env | sed -n 's/^DISPLAY=//p'`"
}

# Change tmux window title to something meaningful
#  Needs to have allow_rename set to on in .tmux.conf!
tmux_reset_name()
{
    local prompt_command='printf "\033k'
    [[ -n "$SSH_CONNECTION" ]] && prompt_command+="($(hostname -s)) "
    prompt_command+='${PWD/#$HOME/"~"}\033\\"'

    PROMPT_COMMAND=${prompt_command}
    precmd() { eval "$PROMPT_COMMAND" }
}

if [[ -n "$TMUX" ]]; then
    tmux_reset_name
fi

#Set name to specific string
tmux_set_name()
{
    prompt_command='printf "\033k'
    prompt_command+="$@"
    prompt_command+='\033\\"'
    PROMPT_COMMAND=${prompt_command}
    precmd() { eval "$PROMPT_COMMAND" }
}



# Turn off beep
unsetopt beep

# History
HISTFILE=~/.zshhist
HISTSIZE=100000
SAVEHIST=100000
setopt hist_ignore_dups
setopt append_history

# Extended glob features (e.g. negate * with ^: ^*)
setopt extendedglob

#Set neovim to be the default vim if available
if command -v nvim > /dev/null; then
    alias vim="nvim"
fi
alias vi=vim  #Point to same as vim

# ps -ef alias
alias psf="ps -ef"

#Snakemake zsh completion
compdef _gnu_generic snakemake
#Snakemake: use 1 core by default
alias snakemake="snakemake --cores 1"

#Little function to plot the fullpath to a given file
path () {
  local totpath="$(cd $(dirname "$1") && pwd -P)/$(basename "$1")"
  printf "$totpath" | pbcopy;
  echo Copied "$totpath" to clipboard.
}

#Function to mount via ssh
#First argument: server
#Second argument (optional):
sshmount () {
  local VOLNAME=${1}${2//\//-}  #Replace / with - for the volname
  local MOUNTDIR=/tmp/Mounts/$VOLNAME
  #Check if directory is already mounted
  if contains "`mount`" $MOUNTDIR
  then
    echo $MOUNTDIR is already mounted
    return 1
  else
    mkdir -p $MOUNTDIR   #Create dir if it does not exist
    if sshfs -o allow_other,auto_cache,reconnect,defer_permissions,noappledouble $1:$2 $MOUNTDIR -o volname=$VOLNAME
    then   #Mount successful
      echo Mounted $VOLNAME in $MOUNTDIR
      return 0
    else   #Error while trying to mount
      echo Removing $MOUNTDIR...
      umount $MOUNTDIR
      rm -r $MOUNTDIR
      return 1
    fi
  fi
}

#Helper function to check if an element is in a given list
#Usage: contains aList anItem
contains() {
    [[ $1 =~ (^|[[:space:]])$2($|[[:space:]]) ]] && return 0 || return 1
}


#Forward jupyter notebook server from remote via ssh
#$1 is the remote host, $2 the port (optional, default=8889)
sshjupyter () {
    sshforward $1 ${2:-8889}
}

#Jupyter forwarding over ssh
alias jupyter_forwarding="jupyter notebook --no-browser --port=8889"

sshvnc () {
    sshforward $1 ${2:-5900}
}

#============== Generic port forwarding functions =======================
# Taken from: https://stackoverflow.com/questions/2241063/bash-script-to-setup-a-temporary-ssh-tunnel

#Function establish a connection
#Argument 1 is the remote host, 2 the remote port, 3 (optional) the local port
_ssh_socket_dir="/tmp/ssh-sockets"
sshforward () {
    mkdir -p "${_ssh_socket_dir}"
    local host="${1}"
    local hostport="${2}"
    local localport="${3:-${hostport}}"
    echo "Forwarding local port ${localport} to ${host}:${hostport}..."
    ssh -M -S "${_ssh_socket_dir}/${host}:${hostport}:${localport}" -fnNT -L "localhost:${localport}:localhost:${hostport}" "${host}"
}

#Open a SOCKS tunnel
sshsocks() {
    mkdir -p "${_ssh_socket_dir}"
    local host="${1}"
    local localport="${2:-8123}"
    echo "Opening SOCKS tunnel to ${host} on local port ${localport}..."
    ssh -M -S "${_ssh_socket_dir}/${host}:SOCKS:${localport}" -D ${localport} -fqN "${host}"
}

#Function to close an established connection with sshforward
sshclose () {
    for socket in "$@"; do
        parts=(${(s_:_)socket}) #split by colon
        local host="${parts[1]}"
        echo "Closing connection to ${socket}..."
        ssh -S "${_ssh_socket_dir}/${socket}" -O exit "${host}"
    done
}
compdef "_files -W ${_ssh_socket_dir}" sshclose


